{"meta":{"title":"koala's blog","subtitle":"慢慢来，请相信自己 。","description":null,"author":"XHY","url":"https://koala949.github.io","root":"/"},"pages":[],"posts":[{"title":"常用数组和字符串方法","slug":"js-数组字符串方法","date":"2019-08-27T03:15:43.884Z","updated":"2019-08-27T03:18:32.780Z","comments":true,"path":"2019/08/27/js-数组字符串方法/","link":"","permalink":"https://koala949.github.io/2019/08/27/js-数组字符串方法/","excerpt":"","text":"字符串方法定义一个字符串： let browserType = ‘mozilla’; indexOf()找出一个较小的字符串是否存在于一个较大的字符串中 browserType.indexOf(‘zilla’);//output:2browserType.indexOf(‘vanilla’);//output:-1 slice()提取字符串中的子字符串，知道开始的位置，以及结束的字符。 browserType.slice(0,3); //output:moz 如果想知道在某个字符之后提取字符串中的所有剩余字符，则不必包含第二个参数，而只需要包含要从中提取的字符位置 字符串中的其余字符。 browserType.slice(2);//output:’zilla’ toLowerCase()、toUpperCase()将所有字符分别转换为小写或大写 replace()将字符串中的一个子字符串替换为另一个子字符串,它需要两个参数 - 要被替换下的字符串和要被替换上的字符串。 browserType = browserType.replace(‘moz’,’van’);。 数组方法介绍一些相当有用的数组方法，这些方法允许我们将字符串拆分为字符串数组，反之亦然，以及添加或删除元素。 字符串和数组之间的转换 split():作为字符串方法，我们提供一个参数，作为字符串分割的字符，并返回分隔符之间的字串，作为数组中的项。 (1)创建字符串 let myData = ‘Manchester,London,liverpool,leeds’ (2)用逗号分隔： let myArray = myData.split(‘,’);console.log(myArray) (3)可以使用join() 方法进行相反的操作 let myNewString = myArray.join(‘,’); toString():将数组转换为字符串的另一种方法，可以比join()更简单，因为它不需要一个参数，但更有限制，使用join()可以指定不同的分隔符 let dogNames = [“Rocket”,”Flash”,”Bella”,”Slugger”];dogNames.toString(); //Rocket,Flash,Bella,Slugger 添加和删除数组项 push()需要添加一个或多个到数组末尾的元素时使用 myArray.push(‘Cardiff’); pop()从数组中删除最后一个元素，直接使用 myArray.pop(); unshift()、 shift()从功能上与 push() 和 pop() 完全相同，只是它们分别作用于数组的开始，而不是结尾。 3.练习过的 map()：创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。map 不修改调用它的原数组本身。 var new_array = arr.map(function callback(currentValue[ index[, array]]) { }[, thisArg]) callback:生成新数组元素的函数，使用三个参数：currentValue:callback 数组中正在处理的当前元素。index可选:callback 数组中正在处理的当前元素的索引。array可选:callback map 方法被调用的数组。thisArg可选:执行 callback 函数时使用的this 值。 every():测试一个数组内的所有元素是否都能通过某个指定函数的测试。它返回一个布尔值。 arr.every(callback[, thisArg]) 例子: function isBigEnough(element, index, array) { return element &gt;= 10; } [12, 5, 8, 130, 44].every(isBigEnough); // false [12, 5, 8, 130, 44].every(x =&gt; x &gt;= 10); //箭头函数 false some()测试是否至少有一个元素可以通过被提供的函数方法。该方法返回一个Boolean类型的值。 filter()创建一个新数组, 其包含通过所提供函数实现的测试的所有元素。 var newArray = arr.filter(callback(element[, index[, array]])[, thisArg])const result = words.filter(word =&gt; word.length &gt; 6);","categories":[{"name":"Javascript","slug":"Javascript","permalink":"https://koala949.github.io/categories/Javascript/"}],"tags":[{"name":"Array","slug":"Array","permalink":"https://koala949.github.io/tags/Array/"},{"name":"String","slug":"String","permalink":"https://koala949.github.io/tags/String/"}]},{"title":"react学习笔记(一)","slug":"0722","date":"2019-08-26T10:10:31.204Z","updated":"2019-08-26T12:08:19.160Z","comments":true,"path":"2019/08/26/0722/","link":"","permalink":"https://koala949.github.io/2019/08/26/0722/","excerpt":"react学习笔记(一) 使用脚手架create-react-app,安装好之后了解结构。yarn.lock 定义了当前使用的确切版本。 还需要用到webpack JSX语法","text":"react学习笔记(一) 使用脚手架create-react-app,安装好之后了解结构。yarn.lock 定义了当前使用的确切版本。 还需要用到webpack JSX语法 (1)class写成className，某写属性比如for 要写成 htmlFor. (2)属性值使用表达式，只要用 {} 替换 “”: (3)属性扩散 var props={}; props.foo =x; props.bar =y; var component = &lt;Component {...props}/&gt; props对象的属性会被设置成Component的属性。 render渲染 react 构建用户界面的库，其元素是JSX元素，其实使用JS来描 述页面对象。render的含义就是把一个react元素渲染到dom 容器内部。 reactDoM.render( React.createElement(&apos;div&apos;,null,[React.createElement(&apos;span&apos;,null,[&apos;hello&apos;])]), document.querySelector(&apos;#root&apos;));标签类型，属性对象，子元素。属性名都要写成驼峰写法。//经过webpack转译后会变成以下形式。 ReactDOM.render(&lt;div&gt; &lt;span&gt;hello&lt; /sapn&gt; &lt;/div&gt;,docoment.querySelector(&apos;#root&apos;)); 小示例：map使用，加key，设置样式和类名 let names = [&apos;一&apos;，&apos;二&apos; ,&apos;三&apos;] ReactDom.render(&lt;div&gt;{ names.map(function (item,index){ return item.length&gt;0?&lt;span style={{backgroundColor:'pink'}} className = &quot;red&quot; key={index}&gt;{item}&lt;/span&gt;:null }) }&lt;/div&gt;,document.querySelector(&apos;#root&apos;)); //有条件的渲染： return item.length&gt;0? tips: 设置数据一定要用setState,如果没用箭头函数则要进行绑定。 123456this.handle =thid.handle.bind(this)handle = ()=&gt;&#123; this.setState&#123; reflash=1, &#125;&#125; 没有default时，引用要有{} 组件 直观的将一个复杂的页面分割成若干个独立组件，每个组件包含自己的逻辑和样式，既减少逻辑复杂度，又实现代码重用。两种组件定义方式：(1)函数声明函数参数是属性对象,首字母一定是大写，定义完之后可以像react元素一样使用。组件的渲染过程：封装props对象，调用组件函数得到返回的React元素，ReactDOM把元素转成真实的DOM元素并插入到目标容器。 let Message = (props)=&gt;{ return &lt;h1&gt;{props.msg}&lt;/h1&gt; }或 let Message = ({msg，id}) =&gt;{ return &lt;h1&gt;{msg}&lt;/h1&gt; } render(&lt;Message msg=&apos;hello&apos; id=&quot;5&quot;/&gt;,...) // 解构： import ReactDom,{render} from &apos;react-dom&apos;;函数声明的组件是静态的，否则要手动添加。 setInterval(function(){ render(&lt;Clock/&gt;,...) },1000) (2)类声明通过类声明组件，类需要继承自Component class Clock extends Component{ constructor(){ super();//自定义组件状态对象 //状态可以用来存放组件内部一些变化的值， this.state = {time:new Date().toLocalString()} } //生命周期函数 componentDidMount(){ window.setInterval(()=&gt;{ this.setState({ time:new Date().toLocalString()}) },1000); } } 组件属性(1) 默认属性static defaultProps ={ name:’aaa’}(2) 如果定义组件时希望传入组件的属性有类型和是否必填的限制，则使用ProTypes。组件的属性可以接受任意值，字符串、对象、函数。使用组件的proType属性，验证组件的实例属性是否符合要求。 var MyTitle = React.creatClass({ proTypes:{ title : React.ProTypes.string.isRequired, }, render: function(){ return &lt;h1&gt;{this.props.title}&lt;/h1&gt; } } var data = 123; ReactDom.render(&lt;MyTile title={data}/&gt;,document.body); 验证不通过。(3) React 提供React.Children 来处理this.props.children,可以用React.Children.map来遍历子节点。 (4) Object.assign方法用来将源对象（source）的所有可枚举属性，复制到目标对象（target）。它至少需要两个对象作为参数，第一个参数是目标对象，后面的参数都是源对象。 虚拟DOM对DOM进行模拟，比较操作前后的数据差异，如果有数据差异，同意操作DOM.(1)受控组件(2)非受控组件","categories":[{"name":"react","slug":"react","permalink":"https://koala949.github.io/categories/react/"}],"tags":[{"name":"react","slug":"react","permalink":"https://koala949.github.io/tags/react/"}]}]}